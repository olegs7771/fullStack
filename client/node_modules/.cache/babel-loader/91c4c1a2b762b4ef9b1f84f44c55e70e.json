{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\src\\\\components\\\\profile\\\\ProfileGitHub.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nvar ProfileGitHub =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProfileGitHub, _Component);\n\n  function ProfileGitHub() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProfileGitHub);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProfileGitHub)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      clientId: \"aa9dbc2066cf6768fda8\",\n      clientSecret: \"0ca4eae21b63507875c6a68f970bc52a562e3af1\",\n      count: 5,\n      sort: \"created:asc\",\n      repos: []\n    };\n    return _this;\n  }\n\n  _createClass(ProfileGitHub, [{\n    key: \"componentDidMount\",\n    // static getDerivedStateFromProps(props, state) {}\n    // componentDidUpdate() {}\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          clientId = _this$state.clientId,\n          clientSecret = _this$state.clientSecret,\n          count = _this$state.count,\n          sort = _this$state.sort,\n          repos = _this$state.repos;\n      var githubUser = this.props.githubUser; //fetch from github using fetch()\n\n      fetch(\"https://api.github.com/users/\".concat(githubUser, \"/repos?per_page=\").concat(count, \"&sort=\").concat(sort, \"&client_id=\").concat(clientId, \"&client_secret=\").concat(clientSecret)).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (_this2.refs.myRef) {\n          _this2.setState({\n            repos: data\n          });\n        }\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var repos = this.state.repos;\n      var reposItem = repos.map(function (repo) {\n        return React.createElement(\"div\", {\n          key: repo.id,\n          className: \"card card-body mb-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: repo.html_url,\n          className: \"text-info\",\n          target: \"_blank\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, repo.name)), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, repo.description), React.createElement(\"div\", {\n          className: \"col-md-6\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"badge badge-info mr-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, \"Stars: \", repo.stargazers_count), React.createElement(\"span\", {\n          className: \"badge badge-secondary mr-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Watchers: \", repo.watchers_count), React.createElement(\"span\", {\n          className: \"badge badge-success mr-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"Forks: \", repo.forks_count))));\n      });\n      return React.createElement(\"div\", {\n        ref: \"myRef\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"h4\", {\n        className: \"mb-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Latest Repos\"), reposItem);\n    }\n  }]);\n\n  return ProfileGitHub;\n}(Component);\n\nProfileGitHub.propTypes = {\n  githubUser: PropTypes.string.isRequired\n};\nexport default ProfileGitHub;","map":{"version":3,"sources":["C:\\Users\\oleg\\fullStack\\fullStack\\client\\src\\components\\profile\\ProfileGitHub.js"],"names":["React","Component","Link","PropTypes","ProfileGitHub","state","clientId","clientSecret","count","sort","repos","githubUser","props","fetch","then","res","json","data","refs","myRef","setState","catch","err","console","log","reposItem","map","repo","id","html_url","name","description","stargazers_count","watchers_count","forks_count","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ProfileGitHub extends Component {\r\n  state = {\r\n    clientId: \"aa9dbc2066cf6768fda8\",\r\n    clientSecret: \"0ca4eae21b63507875c6a68f970bc52a562e3af1\",\r\n    count: 5,\r\n    sort: \"created:asc\",\r\n    repos: []\r\n  };\r\n\r\n  // static getDerivedStateFromProps(props, state) {}\r\n  // componentDidUpdate() {}\r\n\r\n  componentDidMount() {\r\n    const { clientId, clientSecret, count, sort, repos } = this.state;\r\n    const { githubUser } = this.props;\r\n\r\n    //fetch from github using fetch()\r\n    fetch(\r\n      `https://api.github.com/users/${githubUser}/repos?per_page=${count}&sort=${sort}&client_id=${clientId}&client_secret=${clientSecret}`\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (this.refs.myRef) {\r\n          this.setState({\r\n            repos: data\r\n          });\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const { repos } = this.state;\r\n\r\n    const reposItem = repos.map(repo => (\r\n      <div key={repo.id} className=\"card card-body mb-3\">\r\n        <div className=\"row\">\r\n          <h4>\r\n            <a href={repo.html_url} className=\"text-info\" target=\"_blank\">\r\n              {repo.name}\r\n            </a>\r\n          </h4>\r\n          <p>{repo.description}</p>\r\n          <div className=\"col-md-6\">\r\n            <span className=\"badge badge-info mr-1\">\r\n              Stars: {repo.stargazers_count}\r\n            </span>\r\n            <span className=\"badge badge-secondary mr-1\">\r\n              Watchers: {repo.watchers_count}\r\n            </span>\r\n            <span className=\"badge badge-success mr-1\">\r\n              Forks: {repo.forks_count}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div ref=\"myRef\">\r\n        <hr />\r\n\r\n        <h4 className=\"mb-4\">Latest Repos</h4>\r\n        {reposItem}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProfileGitHub.propTypes = {\r\n  githubUser: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ProfileGitHub;\r\n"]},"metadata":{},"sourceType":"module"}