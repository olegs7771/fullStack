{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER, LOGOUT_CURRENT_USER } from \"./types\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\"; //Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //Login User---> Get User Token\n\nexport var loginUser = function loginUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/login\", userData).then(function (res) {\n      //Save to localStorage\n      var token = res.data.token; // Set to localStorage\n\n      localStorage.setItem(\"jwtToken\", token); // Set token to auth header as we did in postman\n\n      setAuthToken(token); //we must create this function in separate file.\n      //decode token to get user data\n\n      var decoded = jwt_decode(token); //set current user\n\n      dispatch(setCurrentUser(decoded)); // we must set this user\n    }).then(function (res) {\n      return history.push(\"/dashboard\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //set current user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; //Logut user\n\nexport var logoutUser = function logoutUser(history) {\n  return function (dispatch) {\n    axios.get(\"/\").then(function (res) {\n      localStorage.clear();\n      dispatch({\n        type: LOGOUT_CURRENT_USER\n      });\n    }).then(function (res) {\n      return history.push(\"/\");\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\oleg\\fullStack\\fullStack\\client\\src\\actions\\authAction.js"],"names":["GET_ERRORS","SET_CURRENT_USER","LOGOUT_CURRENT_USER","axios","setAuthToken","jwt_decode","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","get","clear"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,gBAArB,EAAuCC,mBAAvC,QAAkE,SAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DN,IAAAA,KAAK,CACFO,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEhB,UADC;AAEPiB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAYP;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACb,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC1DN,IAAAA,KAAK,CACFO,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AADW,UAEHS,KAFG,GAEOT,GAAG,CAACO,IAFX,CAEHE,KAFG,EAGX;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAjB,MAAAA,YAAY,CAACiB,KAAD,CAAZ,CANW,CAMU;AAErB;;AACA,UAAMG,OAAO,GAAGnB,UAAU,CAACgB,KAAD,CAA1B,CATW,CAUX;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR,CAXW,CAWwB;AACpC,KAdH,EAeGb,IAfH,CAeQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,YAAb,CAAJ;AAAA,KAfX,EAgBGC,KAhBH,CAgBS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEhB,UADC;AAEPiB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAhBZ;AAsBD,GAvBwB;AAAA,CAAlB,C,CAwBP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEf,gBADD;AAELgB,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AAEA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAAlB,OAAO;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC/CN,IAAAA,KAAK,CACFwB,GADH,CACO,GADP,EAEGhB,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACXU,MAAAA,YAAY,CAACM,KAAb;AACAnB,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEd;AADC,OAAD,CAAR;AAGD,KAPH,EAQGS,IARH,CAQQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,GAAb,CAAJ;AAAA,KARX;AASD,GAVgC;AAAA,CAA1B","sourcesContent":["import { GET_ERRORS, SET_CURRENT_USER, LOGOUT_CURRENT_USER } from \"./types\";\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n//Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\"))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n//Login User---> Get User Token\r\n\r\nexport const loginUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      //Save to localStorage\r\n      const { token } = res.data;\r\n      // Set to localStorage\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to auth header as we did in postman\r\n      setAuthToken(token); //we must create this function in separate file.\r\n\r\n      //decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      //set current user\r\n      dispatch(setCurrentUser(decoded)); // we must set this user\r\n    })\r\n    .then(res => history.push(\"/dashboard\"))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n//set current user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n//Logut user\r\n\r\nexport const logoutUser = history => dispatch => {\r\n  axios\r\n    .get(\"/\")\r\n    .then(res => {\r\n      localStorage.clear();\r\n      dispatch({\r\n        type: LOGOUT_CURRENT_USER\r\n      });\r\n    })\r\n    .then(res => history.push(\"/\"));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}