{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\src\\\\components\\\\post\\\\Post.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../layout/Spinner\";\nimport { getPost } from \"../../actions/postAction\";\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    _classCallCheck(this, Post);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Post).apply(this, arguments));\n  }\n\n  _createClass(Post, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      this.props.getPost(id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          post = _this$props.post,\n          loading = _this$props.loading;\n      var postContent;\n\n      if (post === null || loading || Object.keys(post).length === 0) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        });\n      } else {\n        postContent = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(PostItem, {\n          post: post,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, postContent), React.createElement(Link, {\n        to: \"/feed\",\n        className: \"btn btn-light mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Back To Feed\"))));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nPost.propTypes = {\n  post: PropTypes.object.isRequired,\n  getPost: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    post: state.post\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPost: getPost\n})(Post);","map":{"version":3,"sources":["C:\\Users\\oleg\\fullStack\\fullStack\\client\\src\\components\\post\\Post.js"],"names":["React","Component","connect","PropTypes","Spinner","getPost","Post","id","props","match","params","post","loading","postContent","Object","keys","length","propTypes","object","isRequired","func","mapStateToProps","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,OAAT,QAAwB,0BAAxB;;IAEMC,I;;;;;;;;;;;;;wCACgB;AAAA,UACVC,EADU,GACH,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MADd,CACVH,EADU;AAElB,WAAKC,KAAL,CAAWH,OAAX,CAAmBE,EAAnB;AACD;;;6BAEQ;AAAA,wBACmB,KAAKC,KADxB;AAAA,UACCG,IADD,eACCA,IADD;AAAA,UACOC,OADP,eACOA,OADP;AAEP,UAAIC,WAAJ;;AACA,UAAIF,IAAI,KAAK,IAAT,IAAiBC,OAAjB,IAA4BE,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,KAA6B,CAA7D,EAAgE;AAC9D,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAEO;AACLH,QAAAA,WAAW,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD;AAAU,UAAA,IAAI,EAAEF,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD;;AAED,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BE,WAA5B,CADF,EAEE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,OAAT;AAAiB,QAAA,SAAS,EAAC,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CADF,CADF,CADF;AAYD;;;;EA/BgBZ,S;;AAkCnBK,IAAI,CAACW,SAAL,GAAiB;AACfN,EAAAA,IAAI,EAAER,SAAS,CAACe,MAAV,CAAiBC,UADR;AAEfd,EAAAA,OAAO,EAAEF,SAAS,CAACiB,IAAV,CAAeD;AAFT,CAAjB;;AAIA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCX,IAAAA,IAAI,EAAEW,KAAK,CAACX;AADoB,GAAL;AAAA,CAA7B;;AAIA,eAAeT,OAAO,CACpBmB,eADoB,EAEpB;AAAEhB,EAAAA,OAAO,EAAPA;AAAF,CAFoB,CAAP,CAGbC,IAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport { getPost } from \"../../actions/postAction\";\r\n\r\nclass Post extends Component {\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    this.props.getPost(id);\r\n  }\r\n\r\n  render() {\r\n    const { post, loading } = this.props;\r\n    let postContent;\r\n    if (post === null || loading || Object.keys(post).length === 0) {\r\n      return <Spinner />;\r\n    } else {\r\n      postContent = (\r\n        <div>\r\n          <PostItem post={post} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">{postContent}</div>\r\n            <Link to=\"/feed\" className=\"btn btn-light mb-3\">\r\n              Back To Feed\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  getPost: PropTypes.func.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  post: state.post\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getPost }\r\n)(Post);\r\n"]},"metadata":{},"sourceType":"module"}