{"ast":null,"code":"import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\"; // import createHistory from \"history/createBrowserHistory\";\n\nimport LoadingScreen from \"./components/layout/Spinner\"; // change it to your custom component\n\nvar locationHelper = locationHelperBuilder({});\nexport var userIsAuthenticated = connectedRouterRedirect({\n  // The url to redirect user to if they fail\n  redirectPath: \"/login\",\n  // If selector is true, wrapper will not redirect\n  // For example let's check that state contains user data\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.auth.user == {\n      user: id\n    };\n  },\n  // A nice display name for this check\n  wrapperDisplayName: \"UserIsAuthenticated\"\n});\nexport var userIsNotAuthenticated = connectedRouterRedirect({\n  // This sends the user either to the query param route if we have one, or to the landing page if none is specified and the user is already logged in\n  redirectPath: function redirectPath(state, ownProps) {\n    return locationHelper.getRedirectQueryParam(ownProps) || \"/main\";\n  },\n  // This prevents us from adding the query parameter when we send the user away from the login page\n  allowRedirectBack: false,\n  // If selector is true, wrapper will not redirect\n  // So if there is no user data, then we show the page\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.auth.user !== {};\n  },\n  // A nice display name for this check\n  wrapperDisplayName: \"UserIsNotAuthenticated\"\n});","map":{"version":3,"sources":["C:\\Users\\oleg\\fullStack\\fullStack\\client\\src\\authWrapper.js"],"names":["locationHelperBuilder","connectedRouterRedirect","LoadingScreen","locationHelper","userIsAuthenticated","redirectPath","authenticatedSelector","state","auth","user","id","wrapperDisplayName","userIsNotAuthenticated","ownProps","getRedirectQueryParam","allowRedirectBack"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,4CAAlC;AACA,SAASC,uBAAT,QAAwC,sCAAxC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,6BAA1B,C,CAAyD;;AACzD,IAAMC,cAAc,GAAGH,qBAAqB,CAAC,EAAD,CAA5C;AAEA,OAAO,IAAMI,mBAAmB,GAAGH,uBAAuB,CAAC;AACzD;AACAI,EAAAA,YAAY,EAAE,QAF2C;AAGzD;AACA;AACAC,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,IAAmB;AAAEA,MAAAA,IAAI,EAAEC;AAAR,KAAvB;AAAA,GAL6B;AAMzD;AACAC,EAAAA,kBAAkB,EAAE;AAPqC,CAAD,CAAnD;AAUP,OAAO,IAAMC,sBAAsB,GAAGX,uBAAuB,CAAC;AAC5D;AACAI,EAAAA,YAAY,EAAE,sBAACE,KAAD,EAAQM,QAAR;AAAA,WACZV,cAAc,CAACW,qBAAf,CAAqCD,QAArC,KAAkD,OADtC;AAAA,GAF8C;AAI5D;AACAE,EAAAA,iBAAiB,EAAE,KALyC;AAM5D;AACA;AACAT,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoB,EAAxB;AAAA,GARgC;AAS5D;AACAE,EAAAA,kBAAkB,EAAE;AAVwC,CAAD,CAAtD","sourcesContent":["import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\r\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\r\n// import createHistory from \"history/createBrowserHistory\";\r\nimport LoadingScreen from \"./components/layout/Spinner\"; // change it to your custom component\r\nconst locationHelper = locationHelperBuilder({});\r\n\r\nexport const userIsAuthenticated = connectedRouterRedirect({\r\n  // The url to redirect user to if they fail\r\n  redirectPath: \"/login\",\r\n  // If selector is true, wrapper will not redirect\r\n  // For example let's check that state contains user data\r\n  authenticatedSelector: state => state.auth.user == { user: id },\r\n  // A nice display name for this check\r\n  wrapperDisplayName: \"UserIsAuthenticated\"\r\n});\r\n\r\nexport const userIsNotAuthenticated = connectedRouterRedirect({\r\n  // This sends the user either to the query param route if we have one, or to the landing page if none is specified and the user is already logged in\r\n  redirectPath: (state, ownProps) =>\r\n    locationHelper.getRedirectQueryParam(ownProps) || \"/main\",\r\n  // This prevents us from adding the query parameter when we send the user away from the login page\r\n  allowRedirectBack: false,\r\n  // If selector is true, wrapper will not redirect\r\n  // So if there is no user data, then we show the page\r\n  authenticatedSelector: state => state.auth.user !== {},\r\n  // A nice display name for this check\r\n  wrapperDisplayName: \"UserIsNotAuthenticated\"\r\n});\r\n"]},"metadata":{},"sourceType":"module"}