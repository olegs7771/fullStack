{"ast":null,"code":"// import React, { Component } from \"react\";\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// // import { userIsAuthenticated, userIsNotAuthenticated } from \"./authWrapper\";\n// //setting localStorage for storing currentUser\n// import jwt_decode from \"jwt-decode\"; //decode token\n// import setAuthToken from \"./utils/setAuthToken\"; // setting  token to header as Authorization( like in postman)\n// import { setCurrentUser } from \"./actions/authAction\"; //will send action to set state auth.user:{}\n// import { clearCurrentProfile } from \"./actions/profileAction\";\n// //redux\n// import { Provider } from \"react-redux\";\n// import store from \"./store\";\n// import Header from \"./components/layout/Header\";\n// import Main from \"./components/layout/Main\";\n// import Footer from \"./components/layout/Footer\";\n// import Register from \"./components/auth/Register\";\n// import Login from \"./components/auth/Login\";\n// import Dashboard from \"./components/dashboard/Dashboard\";\n// import CreateProfile from \"./components/create-profile/CreateProfile\";\n// import \"./App.css\";\n// //check for token\n// if (localStorage.jwtToken) {\n//   //Set auth token header auth\n//   setAuthToken(localStorage.jwtToken);\n//   //decode token and get user info and exp\n//   const decoded = jwt_decode(localStorage.jwtToken);\n//   //set currentUser to auth.user in redux state and  Authenticate\n//   store.dispatch(setCurrentUser(decoded));\n//   //check for expired token\n//   const currentTime = Date.now() / 1000;\n//   if (decoded.exp < currentTime) {\n//     //logout user\n//     store.dispatch(clearCurrentProfile());\n//     //redirect to login\n//     window.location.href = \"/login\";\n//   }\n// }\n// class App extends Component {\n//   render() {\n//     return (\n//       <Provider store={store}>\n//         <Router>\n//           <div className=\"App\">\n//             {/* <Header /> */}\n//             <div className=\"container\">\n//               <Switch>\n//                 {/* <Route exact path=\"/\" component={Main} />\n//                 <Route exact path=\"/register\" component={Register} />\n//                 {/* <Route exact path=\"/login\" component={Login} /> */}\n//                 <Route exact path=\"/dashboard\" component={Dashboard} />\n//                 <Route\n//                   exact\n//                   path=\"/create-profile\"\n//                   component={CreateProfile}\n//                 />{\" \"}\n//                 */}\n//               </Switch>\n//             </div>\n//             {/* <Footer /> */}\n//           </div>\n//         </Router>\n//       </Provider>\n//     );\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["C:\\Users\\oleg\\fullStack\\fullStack\\client\\src\\App.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\r\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n// // import { userIsAuthenticated, userIsNotAuthenticated } from \"./authWrapper\";\r\n// //setting localStorage for storing currentUser\r\n// import jwt_decode from \"jwt-decode\"; //decode token\r\n// import setAuthToken from \"./utils/setAuthToken\"; // setting  token to header as Authorization( like in postman)\r\n// import { setCurrentUser } from \"./actions/authAction\"; //will send action to set state auth.user:{}\r\n// import { clearCurrentProfile } from \"./actions/profileAction\";\r\n\r\n// //redux\r\n// import { Provider } from \"react-redux\";\r\n// import store from \"./store\";\r\n// import Header from \"./components/layout/Header\";\r\n// import Main from \"./components/layout/Main\";\r\n// import Footer from \"./components/layout/Footer\";\r\n// import Register from \"./components/auth/Register\";\r\n// import Login from \"./components/auth/Login\";\r\n// import Dashboard from \"./components/dashboard/Dashboard\";\r\n// import CreateProfile from \"./components/create-profile/CreateProfile\";\r\n// import \"./App.css\";\r\n\r\n// //check for token\r\n// if (localStorage.jwtToken) {\r\n//   //Set auth token header auth\r\n//   setAuthToken(localStorage.jwtToken);\r\n//   //decode token and get user info and exp\r\n//   const decoded = jwt_decode(localStorage.jwtToken);\r\n//   //set currentUser to auth.user in redux state and  Authenticate\r\n//   store.dispatch(setCurrentUser(decoded));\r\n\r\n//   //check for expired token\r\n//   const currentTime = Date.now() / 1000;\r\n//   if (decoded.exp < currentTime) {\r\n//     //logout user\r\n//     store.dispatch(clearCurrentProfile());\r\n//     //redirect to login\r\n//     window.location.href = \"/login\";\r\n//   }\r\n// }\r\n// class App extends Component {\r\n//   render() {\r\n//     return (\r\n//       <Provider store={store}>\r\n//         <Router>\r\n//           <div className=\"App\">\r\n//             {/* <Header /> */}\r\n//             <div className=\"container\">\r\n//               <Switch>\r\n//                 {/* <Route exact path=\"/\" component={Main} />\r\n//                 <Route exact path=\"/register\" component={Register} />\r\n//                 {/* <Route exact path=\"/login\" component={Login} /> */}\r\n//                 <Route exact path=\"/dashboard\" component={Dashboard} />\r\n//                 <Route\r\n//                   exact\r\n//                   path=\"/create-profile\"\r\n//                   component={CreateProfile}\r\n//                 />{\" \"}\r\n//                 */}\r\n//               </Switch>\r\n//             </div>\r\n//             {/* <Footer /> */}\r\n//           </div>\r\n//         </Router>\r\n//       </Provider>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n"]},"metadata":{},"sourceType":"module"}