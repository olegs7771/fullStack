{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\oleg\\\\fullStack\\\\fullStack\\\\client\\\\src\\\\components\\\\posts\\\\PostFeed.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts } from \"../../actions/postAction\";\nimport Spinner from \"../layout/Spinner\";\n\nvar PostFeed =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostFeed, _Component);\n\n  function PostFeed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostFeed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostFeed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      posts: []\n    };\n    return _this;\n  }\n\n  _createClass(PostFeed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$post = this.props.post,\n          posts = _this$props$post.posts,\n          loading = _this$props$post.loading;\n\n      if (posts === [] && loading) {\n        var _feedContent;\n\n        _feedContent = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n      } else {\n        if (posts === []) {\n          feedContent = React.createElement(\"div\", {\n            className: \"row\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"col-md-12\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }, \"No posts to show\")));\n        }\n\n        feedContent = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, posts.map(function (post) {\n          return React.createElement(\"div\", {\n            key: post._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            className: \"list-group-item\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35\n            },\n            __self: this\n          }, post.text));\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container my-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Posts Here\"), React.createElement(\"ul\", {\n        className: \"list-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, feedContent)))));\n    }\n  }]);\n\n  return PostFeed;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    post: state.post\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPosts: getPosts\n})(PostFeed);","map":{"version":3,"sources":["C:\\Users\\oleg\\fullStack\\fullStack\\client\\src\\components\\posts\\PostFeed.js"],"names":["React","Component","connect","getPosts","Spinner","PostFeed","state","posts","props","post","loading","feedContent","map","_id","text","mapStateToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;IAEMC,Q;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;wCAIY;AAClB,WAAKC,KAAL,CAAWL,QAAX;AACD;;;6BAEQ;AAAA,6BACoB,KAAKK,KAAL,CAAWC,IAD/B;AAAA,UACCF,KADD,oBACCA,KADD;AAAA,UACQG,OADR,oBACQA,OADR;;AAEP,UAAIH,KAAK,KAAK,EAAV,IAAgBG,OAApB,EAA6B;AAC3B,YAAIC,YAAJ;;AACAA,QAAAA,YAAW,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;AACD,OAHD,MAGO;AACL,YAAIJ,KAAK,KAAK,EAAd,EAAkB;AAChBI,UAAAA,WAAW,GACT;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CADF,CADF;AAOD;;AAEDA,QAAAA,WAAW,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGJ,KAAK,CAACK,GAAN,CAAU,UAAAH,IAAI;AAAA,iBACb;AAAK,YAAA,GAAG,EAAEA,IAAI,CAACI,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAI,YAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiCJ,IAAI,CAACK,IAAtC,CADF,CADa;AAAA,SAAd,CADH,CADF;AASD;;AAED,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BH,WAA5B,CAFF,CADF,CAFF,CADF,CADF;AAaD;;;;EAjDoBV,S;;AAoDvB,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAAT,KAAK;AAAA,SAAK;AAChCG,IAAAA,IAAI,EAAEH,KAAK,CAACG;AADoB,GAAL;AAAA,CAA7B;;AAIA,eAAeP,OAAO,CACpBa,eADoB,EAEpB;AAAEZ,EAAAA,QAAQ,EAARA;AAAF,CAFoB,CAAP,CAGbE,QAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPosts } from \"../../actions/postAction\";\r\nimport Spinner from \"../layout/Spinner\";\r\n\r\nclass PostFeed extends Component {\r\n  state = {\r\n    posts: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getPosts();\r\n  }\r\n\r\n  render() {\r\n    const { posts, loading } = this.props.post;\r\n    if (posts === [] && loading) {\r\n      let feedContent;\r\n      feedContent = <Spinner />;\r\n    } else {\r\n      if (posts === []) {\r\n        feedContent = (\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <div className=\"text-center\">No posts to show</div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      feedContent = (\r\n        <div>\r\n          {posts.map(post => (\r\n            <div key={post._id}>\r\n              <li className=\"list-group-item\">{post.text}</li>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"container my-5\">\r\n          <hr />\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <h4 className=\"text-center\">Posts Here</h4>\r\n              <ul className=\"list-group\">{feedContent}</ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  post: state.post\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getPosts }\r\n)(PostFeed);\r\n"]},"metadata":{},"sourceType":"module"}